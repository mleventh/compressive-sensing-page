// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $d3Object = (function() {
    function d3Object(id) {
      this.element = d3.select("#" + id);
      this.element.selectAll("svg").remove();
      this.obj = this.element.append("svg");
      this.initAxes();
    }

    d3Object.prototype.append = function(obj) {
      return this.obj.append(obj);
    };

    d3Object.prototype.initAxes = function() {};

    return d3Object;

  })();

  $LineChart = (function(superClass) {
    extend(LineChart, superClass);

    function LineChart(spec) {
      var click, r, ref, ref1, ref2, ref3, ref4;
      this.spec = spec;
      this.id = this.spec.id;
      this.container = $("#" + this.id);
      this.x0 = (ref = this.spec.x0) != null ? ref : 100;
      this.y0 = (ref1 = this.spec.y0) != null ? ref1 : 50;
      this.width = this.container.width() - this.x0 * 2;
      this.height = this.container.height() - this.y0 * 2;
      this.xLabel = (ref2 = this.spec.xLabel) != null ? ref2 : "";
      this.yLabel = (ref3 = this.spec.yLabel) != null ? ref3 : "";
      this.background = (ref4 = this.spec.background) != null ? ref4 : "#eee";
      LineChart.__super__.constructor.call(this, this.id);
      this.line = d3.svg.line().x((function(_this) {
        return function(d) {
          return _this.xScale(d.x) + _this.x0;
        };
      })(this)).y((function(_this) {
        return function(d) {
          return _this.yScale(d.y) + _this.y0;
        };
      })(this));
      r = this.append("rect").attr("width", this.width).attr("height", this.height).style("fill", this.background).attr("transform", "translate(" + this.x0 + ", " + this.y0 + ")");
      this.append("g").attr("class", "axis").attr("transform", "translate(" + this.x0 + ", " + (this.y0 + this.height) + ")").call(this.xAxis);
      this.append("text").attr("text-anchor", "center").attr("x", this.x0 + this.width / 2).attr("y", this.y0 + this.height + 40).text(this.xLabel);
      this.append("g").attr("class", "axis").attr("transform", "translate(" + this.x0 + ", " + this.y0 + ")").call(this.yAxis);
      this.append("text").attr("text-anchor", "middle").attr("x", this.x0 - 70).attr("y", this.y0 + this.height / 2).text(this.yLabel);
      if (this.spec.click != null) {
        click = (function(_this) {
          return function(coords) {
            var x, xm, y, ym;
            xm = coords[0], ym = coords[1];
            x = _this.xScale.invert(xm);
            y = _this.yScale.invert(ym);
            return _this.spec.click(x, y);
          };
        })(this);
        r.on("click", function() {
          return click(d3.mouse(this));
        });
      }
      this.path = null;
    }

    LineChart.prototype.clear = function() {
      return this.obj.selectAll("path").remove();
    };

    LineChart.prototype.plot = function(x, y, color, hold) {
      var data, foundNaN, i, idx, len, xp, yp;
      if (color == null) {
        color = "blue";
      }
      if (hold == null) {
        hold = false;
      }
      if (this.path && !hold) {
        this.path.remove();
      }
      data = (function() {
        var i, len, results;
        results = [];
        for (idx = i = 0, len = x.length; i < len; idx = ++i) {
          xp = x[idx];
          results.push({
            x: x[idx],
            y: y[idx]
          });
        }
        return results;
      })();
      foundNaN = false;
      for (i = 0, len = y.length; i < len; i++) {
        yp = y[i];
        if (isNaN(yp) || Math.abs(yp) > 1e10) {
          foundNaN = true;
        }
      }
      if (foundNaN) {
        return;
      }
      return this.path = this.append("path").attr("d", this.line(data)).attr("stroke", color).attr("stroke-width", 2).attr("fill", "none");
    };

    LineChart.prototype.initAxes = function() {
      var ref, ref1, ref2, ref3;
      this.xScale = d3.scale.linear().domain((ref = this.spec.xLim) != null ? ref : [0, 1]).range([0, this.width]);
      this.xAxis = d3.svg.axis().scale(this.xScale).ticks((ref1 = this.spec.xTicks) != null ? ref1 : 10).orient("bottom");
      this.yScale = d3.scale.linear().domain((ref2 = this.spec.yLim) != null ? ref2 : [0, 1]).range([this.height, 0]);
      return this.yAxis = d3.svg.axis().scale(this.yScale).ticks((ref3 = this.spec.yTicks) != null ? ref3 : 10).orient("left");
    };

    return LineChart;

  })($d3Object);

}).call(this);
